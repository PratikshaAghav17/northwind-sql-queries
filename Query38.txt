38. Classify employees based on the number of orders they have processed such that NumberOfOrders > 100 Then PerformanceCategory as ‘High Performing’. If NumberOfOrders>50 Then ‘Medium Performing’ and else ‘Lower Performing’

SELECT Employees.Employee_ID, Employees.First_Name, Employees.Last_Name,
    COUNT(Orders.Order_ID) AS NumberOfOrders,
    CASE
        WHEN COUNT(Orders.Order_ID) > 100 THEN 'High Performing'
        WHEN COUNT(Orders.Order_ID) > 50 THEN 'Medium Performing'
        ELSE 'Lower Performing'
    END AS PerformanceCategory
FROM Employees
LEFT JOIN Orders ON Employees.Employee_ID = Orders.Employee_ID
GROUP BY Employees.Employee_ID, Employees.First_Name, Employees.Last_Name
ORDER BY NumberOfOrders DESC;

This query involves joining the Employees and Orders tables using a LEFT JOIN. It counts the number of orders processed by each employee using the COUNT(Orders.OrderID) function.
The CASE statement is used to classify employees based on the number of orders they have processed into different categories: 'High Performing', 'Medium Performing', and 'Lower Performing'. It compares the number of orders with specific thresholds and assigns the corresponding category based on the conditions provided.
The results are grouped by EmployeeID, FirstName, and LastName, and the number of orders and performance category are calculated for each employee.
The results are then sorted in descending order based on the number of orders using the ORDER BY clause.